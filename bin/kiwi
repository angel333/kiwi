#!/usr/bin/env bash

#
# Defaults
#

VERSION=0.0.1
ORIGIN=git://github.com/visionmedia/kiwi.git
SERVER=http://0.0.0.0:8888
SEED_DEST=~/.kiwi/seeds
VERBOSE=

#
# Output usage.
#

usage() {
cat << EOF

  Usage:
    
    ${0##*/} [options] [command] [arguments]
    
  Options:
    
    -v, --verbose     Verbose
    -V, --version     Current version triplet
    -S, --seeds       Output seed directory
    -h, --help        Help information
    
  Commands:
    
    install           Installs a seed <name> with optional [version]
    uninstall         Uninstalls all versions of seed <name> or the given [version]
    search            Search remotely available seeds with optional [pattern]
    list              Lists installed seeds and their associated versions
    build             Build <version>.seed with the contents of the current directory
    publish           Build seed <name> and <version> to the kiwi server
    update self       Updates kiwi to the latest release
EOF
}

#
# Abort with the given <msg ...>
# 
# <msg ...>
#

abort() {
  echo $* && exit 1
}

#
# Log the given <msg ...> when $VERBOSE is true.
# 
# <msg ...>
#

log() {
  local key=$1; shift
  if [[ $VERBOSE ]]; then printf "%10s : %s\n" $key "$*"; fi
}

#
# Create $SEED_DEST when not present.
# 

setup() {
  if [[ ! -d $SEED_DEST ]]; then
    log create $SEED_DEST
    mkdir -p $SEED_DEST  
  fi
}

#
# Create $SEED_DEST/<name>/<version> when not present, 
# otherwise abort with already installed message.
# 
# <name> <version>
#

setup_seed() {
  local dir=$SEED_DEST/$1/$2
  if [[ ! -d $dir ]]; then
    log create $dir
    mkdir -p $dir
  else
    abort "$1 $2 is already installed."
  fi
}

#
# Pack <version>.seed with the contents of the current directory.
# 
# <version>
#

pack() {
  require_seed_info_file seed.yml
  log pack "* -> $1.seed"
  tar -czf $1.seed *
}

#
# Unpack <seed> using tar.
# 
# <seed>
#

unpack() {
  local seed=$1
  local dir=$(dirname $1)
  log unpack $seed
  tar -xzf $seed -C $dir 2> /dev/null
  if [[ $? -ne 0 ]]; then
    log removing $dir
    rm -fr $dir
    abort "failed to unpack. Seed is invalid or corrupt."
  fi
  log remove $seed
  rm -f $seed
}

#
# Search remote seeds with the given [pattern].
# 
# [pattern]
#

search() {
  curl -s $SERVER/search?name=$1
}

#
# Download seed <name> with <version> to $SEED_DEST/<name>/<version>/<name>.seed
# 
# Populates global $seed with path to the seed archive.
# 
# <name> <version>
#

download() {
  local name=$1
  local version=$2
  setup_seed $name $version
  log fetch $version.seed
  seed=$SEED_DEST/$name/$version/$name.seed
  curl -s $SERVER/$name/$version -o $seed
}

#
# Build seed in the given <dir>.
# 
# <dir>
#

build() {
  local dir=$1
  local info=$dir/seed.yml
  require_seed_info_file $info
  local command=$(cat $info | grep build | sed 's/build: *//' )
  if [[ $command ]]; then
    log cd $dir
    cd $dir
    log build $command
    if [[ $VERBOSE ]]; then
      eval $command
    else
      eval "$command > /dev/null"
    fi
  fi
}

#
# Publish the given <version> of the seed <name> in the current directory.
# 
# <name> <version>
#

publish() {
  local name=$1
  local version=$2
  local seed=$version.seed
  if [[ ! -f $seed ]]; then abort $seed not found.; fi
  require_seed_info_file seed.yml
  log publish "$seed -> $SERVER/$name"
  curl -F seed=@$seed -F info=@seed.yml $SERVER/$name
}

#
# Install dependencies defined in the given seed info <file>.
# 
# <file>
#

install_dependencies() {
  require_seed_info_file $1
  log check dependencies
  cat $1 | awk '$1 == "dependencies:", $1 ~ /\w+:/' | grep ' -' | awk '{ system("kiwi install " $2 " " $3) }'
}

#
# Install a seed <name> with [version].
# 
#   - Fetches latest version when [version] absent
#   - Downloads seed tarball
#   - Unpacks the tarball
# 
# <name> [version]
#

install() {
  local name=$1
  local version=$2
  log install $name $version
  setup
  if [[ ! $version ]]; then
    log fetch latest version
    version=$(curl -s $SERVER/$name/latest)
  fi
  download $name $version
  unpack $seed
  build $(dirname $seed)
  install_dependencies $(dirname $seed)/seed.yml
}

#
# Uninstall seed <name> with [version]. When [version] is not
# present all versions of the seed will be removed.
# 
# <name> [version]
#

uninstall() {
  local name=$1
  local version=$2
  if [[ $version ]]; then
    if [[ -d $SEED_DEST/$name/$version ]]; then
      log uninstall $name $version
      rm -fr $SEED_DEST/$name/$version
    else
      log cannot find $name $version
    fi  
  else
    if [[ -d $SEED_DEST/$name ]]; then
      log uninstall all versions of $name
      rm -fr $SEED_DEST/$name
    else
      log error cannot find $name
    fi
  fi
}

#
# List install seeds and their associated versions.
# 

list() {
  local dirs=$SEED_DEST/*
  for dir in $dirs;
  do
    local name=$(basename $dir)
    printf "%15s : " $name
    local versions=$SEED_DEST/$name/*
    for version in $versions
    do
      echo -n "$(basename $version) "  
    done
    echo
  done
}

#
# Open seed directory for the given seed <name>
# 
# <name>
#

open_seed_directory() {
  $EDITOR $SEED_DEST/$1
}

#
# Update kiwi to the latest version.
# 

update_self() {
  cd /tmp && git clone $ORIGIN && 
  cd kiwi && sudo make install &&
  echo -n 'Updated kiwi to ' && kiwi --version
}

#
# Install the latest version of all installed seeds.
# 

update_all() {
  local dirs=$SEED_DEST/*
  for dir in $dirs;
  do
    local name=$(basename $dir)
    install $name
  done
}

#
# Require presence of seed info <file> or abort.
# 
# <file>
#

require_seed_info_file() {
  if [[ ! -f $1 ]]; then abort seed.yml file required.; fi
}

#
# Require presence of seed <name> or abort.
# 
# <name>
#

require_seed_name() {
  test $1 || abort seed name required.
}

#
# Require presence of seed <version> or abort.
# 
# <version>
#

require_seed_version() {
  test $1 || abort seed version required.
}

#
# Parse arguments.
#

while [[ $# -gt 0 ]]; do
  arg=$1; shift
  case $arg in
    -v|--verbose) VERBOSE=1 ;;
    -V|--version) echo $VERSION ;;
    -S|--seeds) echo $SEED_DEST ;;
    -h|--help|help) usage ;;
    --*) abort "invalid option \`$arg'. Use --help for more information" ;;
    update)
      if [[ $1 = "self" ]]; then
        update_self 
      else
        update_all
      fi
      ;;
    open)
      require_seed_name $1
      open_seed_directory $*
      ;;
    uninstall)
      require_seed_name $1
      uninstall $* 
      ;;
    install)
      require_seed_name $1
      install $*
      ;;
    publish)
      require_seed_name $1
      require_seed_version $2
      publish $* ;;
    build)
      require_seed_version $1
      pack $*
      ;;
    search) 
      search $*
      ;;
    list)
      list $*
      ;;
  esac
done
