#!/usr/bin/env bash

#
# Defaults
#

VERSION=0.0.1
ORIGIN=git://github.com/visionmedia/kiwi.git
SERVER=http://0.0.0.0:8888
SEED_DEST=~/.kiwi/seeds
VERBOSE=

#
# Output usage.
#

usage() {
cat << EOF

  Usage:
    
    ${0##*/} [options] [command] [arguments]
    
  Options:
    
    -v, --verbose     Verbose
    -V, --version     Current version triplet
    -S, --seeds       Output seed directory
    -h, --help        Help information
    
  Commands:
    
    <void>            Starts a kiwi interactive console (REPL)
    install           Installs a seed <name> with optional [version]
    uninstall         Uninstalls all versions of seed <name> or the given [version]
    search            Search remotely available seeds with optional [pattern]
    list              Lists installed seeds and their associated versions
    build             Build <version>.seed with the contents of the current directory
    publish           Build seed <name> and <version> to the kiwi server
    release           Build and publish seed <name> and <version>
    update            Install the latest release of every seed installed
    update self       Updates kiwi to the latest release
    
  Install:
  
    Installing the latest version of a seed:
    
      $ kiwi install sass
      
    Installing a specific version:
    
      $ kiwi install sass ">~ major.minor.patch"
  
    The following operators are supported for matching versions:
    
      =                 Equal to
      >                 Greater than
      >=                Greater than or equal to
      >~                Greater than or equal to with compatibility (major must match)

EOF
}

#
# Abort with the given <msg ...>
# 
# <msg ...>
#

abort() {
  echo Error: $* && exit 1
}

#
# Log the given <msg ...> when $VERBOSE is true.
# 
# <msg ...>
#

log() {
  local key=$1; shift
  [[ $VERBOSE ]] && printf "%10s : %s\n" $key "$*"
}

#
# Create $SEED_DEST when not present.
# 

setup() {
  if [[ ! -d $SEED_DEST ]]; then
    log create $SEED_DEST
    mkdir -p $SEED_DEST  
  fi
}

#
# Create $SEED_DEST/<name>/<version>.
# 
# <name> <version>
#

setup_seed() {
  local dir=$SEED_DEST/$1/$2
  log create $dir
  mkdir -p $dir
}

#
# Pack <version>.seed with the contents of the current directory.
# 
# <version>
#

pack() {
  require_seed_info_file seed.yml
  local tmpfile=$(mktemp -t 'kiwi-ignore')
  if [[ -f .ignore ]]; then
    log ignore globs in .ignore
    ls -A | egrep --file .ignore > $tmpfile
  fi
  log ignore common scm directories
  echo -e ".git\n.svn\n.cvs" >> $tmpfile
  log pack "* -> $1.seed"
  tar --exclude-from $tmpfile -czf $1.seed .
}

#
# Unpack <seed> using tar.
# 
# <seed>
#

unpack() {
  local seed=$1
  local dir=${seed%/*}
  log unpack $seed
  tar -xzf $seed -C $dir 2> /dev/null
  if [[ $? -ne 0 ]]; then
    log remove $dir
    rm -fr $dir
    abort failed to unpack. Seed is invalid or corrupt.
  fi
  log remove $seed
  rm -f $seed
}

#
# Search remote seeds with the given [pattern].
# 
# [pattern]
#

search() {
  curl -s $SERVER/search?name=$1
}

#
# Download seed <name> with <version> to $SEED_DEST/<name>/<version>/<name>.seed
# 
# Populates global $seed with path to the seed archive.
# 
# <name> <version>
#

download() {
  local name=$1
  local version=$2
  setup_seed $name $version
  log fetch $version.seed
  seed=$SEED_DEST/$name/$version/$name.seed
  curl -s $SERVER/$name/$version -o $seed
}

#
# Build seed in the given <dir>.
# 
# <dir>
#

build() {
  local dir=$1
  local info=$dir/seed.yml
  require_seed_info_file $info
  local command=$(cat $info | grep build | sed 's/build: *//' )
  if [[ $command ]]; then
    log cd $dir
    cd $dir
    log build $command
    if [[ $VERBOSE ]]; then
      eval $command
    else
      eval "$command > /dev/null"
    fi
  fi
}

#
# Publish the given <version> of the seed <name> in the current directory.
# 
# <name> <version>
#

publish() {
  local name=$1
  local version=$2
  local seed=$version.seed
  [[ ! -f $seed ]] && abort $seed not found.
  require_seed_info_file seed.yml
  log publish "$seed -> $SERVER/$name"
  curl --data-binary -F seed=@$seed -F info=@seed.yml $SERVER/$name
}

#
# Install dependencies defined in the given seed info <file>.
# 
# <file>
#

install_dependencies() {
  require_seed_info_file $1
  log check dependencies
  cat $1 | awk '$1 == "dependencies:", $1 ~ /\w+:/' | grep '-' | awk '{ system("kiwi install " $2 " \"" $3 " " $4 "\"") }'
}

#
# Remove empty seed directories.
# 

remove_empty_seed_directories() {
  setup
  require_seeds
  local dirs=$SEED_DEST/*
  for dir in $dirs;
  do
    if [[ -z $(ls -A $dir/) ]]; then
      log remove $dir
      rmdir $dir
    fi
  done
}

#
# Install a seed <name> with [version].
#
# When a <file> is passed, it should be a flat-list
# of seeds to install, formatted as:
#   <name> [op] <version>\n
#   <name> [op] <version>\n
#   ...
#
# Otherwise:
# 
#   - Fetches latest version when [version] absent
#   - Downloads seed tarball
#   - Unpacks the tarball
# 
# <name|file> [version]
#

install() {
  local name=$1; shift
  local version=$*
  log install $name $version
  setup
  if [[ -f $name ]]; then
    log install from file
    cat $name | awk '{ system("kiwi install " $1 " \"" $2 " " $3 "\"") }'
  else
    version=$(curl -s $SERVER/$name/resolve?version=$(urlencode $version))
    log resolve version $version
    if [[ -d $SEED_DEST/$name/$version ]]; then
      log install already installed
    else
      download $name $version
      unpack $seed
      build ${seed%/*}
      install_dependencies ${seed%/*}/seed.yml
    fi
  fi
}

#
# Uninstall seed <name> with [version]. When [version] is not
# present all versions of the seed will be removed.
# 
# <name> [version]
#

uninstall() {
  local name=$1
  local version=$2
  if [[ $version ]]; then
    if [[ -d $SEED_DEST/$name/$version ]]; then
      log uninstall $name $version
      rm -fr $SEED_DEST/$name/$version
    else
      log cannot find $name $version
    fi  
  else
    if [[ -d $SEED_DEST/$name ]]; then
      log uninstall all versions of $name
      rm -fr $SEED_DEST/$name
    else
      log error cannot find $name
    fi
  fi
  remove_empty_seed_directories
}

#
# List install seeds and their associated versions.
# 

list() {
  setup
  require_seeds
  local dirs=$SEED_DEST/*
  for dir in $dirs;
  do
    local name=${dir##*/}
    printf "%15s : " $name
    local versions=$SEED_DEST/$name/*
    for version in $versions
    do
      echo -n "${version##*/} "
    done
    echo
  done
}

#
# Open seed directory for the given seed <name>
# 
# <name>
#

open_seed_directory() {
  $EDITOR $SEED_DEST/$1
}

#
# Update kiwi to the latest version.
# 

update_self() {
  cd /tmp && git clone $ORIGIN && 
  cd kiwi && sudo make install &&
  echo -n 'Updated kiwi to ' && kiwi --version
}

#
# Install the latest version of all installed seeds.
# 

update_all() {
  setup
  require_seeds
  local dirs=$SEED_DEST/*
  echo
  for dir in $dirs;
  do
    install ${dir##*/}
    echo
  done
}

#
# Urlencode all args.
# 
# <arg ...>
#

urlencode() {
  echo $(echo $* | sed 's/>/%3e/g;s/=/%3D/g;s/ /%20/g')
}

#
# Abort unless one or more seeds are installed.
# 

require_seeds() {
  [[ -z $(ls -A $SEED_DEST/) ]] && abort no seeds are installed.
}

#
# Require presence of seed info <file> or abort.
# 
# <file>
#

require_seed_info_file() {
  [[ ! -f $1 ]] && abort seed.yml file required.
}

#
# Require presence of seed <name> or abort.
# 
# <name>
#

require_seed_name() {
  [[ $1 ]] || abort seed name required.
}

#
# Require presence of seed <version> or abort.
# 
# <version>
#

require_seed_version() {
  [[ $1 ]] || abort seed version required.
}

#
# Start kiwi REPL.
# 

repl() {
  echo -n 'kiwi> '
  read line
  [[ $line ]] && eval "kiwi $line"
  repl
}

#
# Parse the given args.
# 
# <arg ...>
#

parse() {
  while [[ $# -gt 0 ]]; do
    arg=$1; shift
    case $arg in
      -v|--verbose) VERBOSE=1 ;;
      -V|--version) echo $VERSION ;;
      -S|--seeds) echo $SEED_DEST ;;
      -h|--help|help) usage | less ;;
      --*) 
        abort "invalid option \`$arg'. Use --help for more information"
        ;;
      update)
        if [[ $1 = "self" ]]; then
          update_self 
        else
          update_all
        fi
        ;;
      open)
        require_seed_name $1
        open_seed_directory $*
        ;;
      uninstall)
        require_seed_name $1
        uninstall $* 
        ;;
      install)
        require_seed_name $1
        install $*
        ;;
      publish)
        require_seed_name $1
        require_seed_version $2
        publish $* 
        ;;
      build)
        require_seed_version $1
        pack $*
        ;;
      release)
        require_seed_name $1
        require_seed_version $2
        pack $2 && publish $*
        ;;
      search) 
        search $*
        ;;
      repl)
        repl
        ;;
      list)
        list $*
        ;;
    esac
  done
}

#
# Parse arguments.
#

if [[ $# -eq 0 ]]; then
  if [[ $(which rlwrap) ]]; then
    rlwrap kiwi repl
  else
    kiwi repl
  fi
else
  parse $*  
fi
