#!/usr/bin/env bash

#
# Defaults
#

VERSION=0.0.1
SEED_DIR=seeds
SEED_DEST=~/.kiwi/seeds
VERBOSE=

#
# Output usage.
#

usage() {
cat << EOF
Usage:
  
  ${0##*/} [options] [arguments]

Options:
  -v, --verbose     Verbose
  -V, --version     Current version triplet
  -h, --help        Help information
EOF
}

#
# Abort with the given <msg ...>
# 
# <msg ...>
#

abort() {
  echo $* && exit 1
}

#
# Log the given <msg ...> when $VERBOSE is true.
# 
# <msg ...>
#

log() {
  if [ $VERBOSE ]; then echo ... $*; fi
}

#
# Create $SEED_DEST when not present.
# 

setup() {
  if [ ! -d $SEED_DEST ]; then
    log creating $SEED_DEST
    mkdir -p $SEED_DEST  
  fi
}

#
# Create $SEED_DEST/<name> when not present.
# 
# <name>
#

setup_seed() {
  if [ ! -d $SEED_DEST/$1 ]; then
    log creating $SEED_DEST/$1
    mkdir -p $SEED_DEST/$1
  fi
}

#
# Get seed info for <name> and the given <key>
# 
# <name> <key>
#

info() {
  cat "$SEED_DIR/$1.yml" | grep $2 | awk '{ print $2 }'
}

#
# Unpack <seed> using tar.
# 
# <seed>
#

unpack() {
  log unpacking $1
  tar -xf $1 -C $(dirname $1) 
}

#
# Download seed <name> with [version] to $SEED_DEST/<name>/<name>.seed
# 
# <name> [version]
#

download() {
  if [ ! $1 ]; then abort seed name required.; fi
  log locating $1.yml
  if [ ! -f "$SEED_DIR/$1.yml" ]; then abort failed to locate $1.yml; fi
  local version=${2-$(info $1 release)}
  log fetching $1 version $version
  local path=$(info $1 path | sed "s/{version}/$version/")
  setup_seed $1
  log transfering $path
  local seed=$SEED_DEST/$1/$1.seed
  curl -L $path -o $seed
  unpack $seed
}

#
# Install a seed <name> with [version]
# 
# <name> [version]
#

install() {
  setup
  download $*
}

#
# Parse arguments.
#

while [[ $# -gt 0 ]]; do
  arg=$1; shift
  case $arg in
    -v|--verbose) VERBOSE=1 ;;
    -V|--version) echo $VERSION ;;
    -h|--help) usage ;;
    --*) echo invalid option $arg. Use --help for more information ;;
    install) install $* ;;
  esac
done
