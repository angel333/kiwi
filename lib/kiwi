#!/usr/bin/env bash

#
# Defaults
#

VERSION=0.0.1
SEED_DIR=seeds
SEED_DEST=~/.kiwi/seeds
VERBOSE=

#
# Output usage.
#

usage() {
cat << EOF

  Usage:
    
    ${0##*/} [options] [command] [arguments]
    
  Options:
    
    -v, --verbose     Verbose
    -V, --version     Current version triplet
    -h, --help        Help information
    
  Commands:
    
    install           Installs a seed with optional version
    uninstall         Uninstalls all versions of a seed or the given version
  
EOF
}

#
# Abort with the given <msg ...>
# 
# <msg ...>
#

abort() {
  echo $* && exit 1
}

#
# Log the given <msg ...> when $VERBOSE is true.
# 
# <msg ...>
#

log() {
  if [[ $VERBOSE ]]; then echo ... $*; fi
}

#
# Create $SEED_DEST when not present.
# 

setup() {
  if [[ ! -d $SEED_DEST ]]; then
    log creating $SEED_DEST
    mkdir -p $SEED_DEST  
  fi
}

#
# Create $SEED_DEST/<name>/<version> when not present, 
# otherwise abort with already installed message.
# 
# <name> <version>
#

setup_seed() {
  local dir=$SEED_DEST/$1/$2
  if [[ ! -d $dir ]]; then
    log creating $dir
    mkdir -p $dir
  else
    abort $1 $2 is already installed
  fi
}

#
# Get seed info for <name> and the given <key>
# 
# <name> <key>
#

info() {
  cat "$SEED_DIR/$1.yml" | grep $2 | awk '{ print $2 }'
}

#
# Unpack <seed> using tar.
# 
# <seed>
#

unpack() {
  local dir=$(dirname $1)
  log unpacking $1
  tar -xf $1 -C $dir
  local extracted_dir=$(find $dir -type d -depth 1)
  log copying contents of $extracted_dir
  cp -fr $extracted_dir/* $dir
  log removing $extracted_dir
  rm -fr $extracted_dir
  log removing $seed
  rm -f $seed
}

#
# Download seed <name> with [version] to $SEED_DEST/<name>/[version]/<name>.seed
# 
# <name> [version]
#

download() {
  if [[ ! $1 ]]; then abort seed name required.; fi
  log locating $1.yml
  if [[ ! -f "$SEED_DIR/$1.yml" ]]; then abort failed to locate $1.yml; fi
  local version=${2-$(info $1 release)}
  log fetching $1 version $version
  local path=$(info $1 path | sed "s/{version}/$version/")
  setup_seed $1 $version
  log transfering $path
  local seed=$SEED_DEST/$1/$version/$1.seed
  curl -L $path -o $seed
  unpack $seed
}

#
# Install a seed <name> with [version]
# 
# <name> [version]
#

install() {
  setup
  download $*
}

#
# Uninstall seed <name> with [version]. When [version] is not
# present all versions of the seed will be removed.
# 
# <name> [version]
#

uninstall() {
  if [[ ! $1 ]]; then abort seed name required.; fi
  if [[ $2 ]]; then
    if [[ -d $SEED_DEST/$1/$2 ]]; then
      log uninstalling $1 $2
      rm -fr $SEED_DEST/$1/$2
    else
      log cannot find $1 $2
    fi  
  else
    if [[ -d $SEED_DEST/$1 ]]; then
      log uninstalling all versions of $1
      rm -fr $SEED_DEST/$1  
    else
      log cannot find $1
    fi
  fi
}

#
# Parse arguments.
#

while [[ $# -gt 0 ]]; do
  arg=$1; shift
  case $arg in
    -v|--verbose) VERBOSE=1 ;;
    -V|--version) echo $VERSION ;;
    -h|--help) usage ;;
    --*) echo invalid option $arg. Use --help for more information ;;
    uninstall) uninstall $* ;;
    install) install $* ;;
  esac
done
